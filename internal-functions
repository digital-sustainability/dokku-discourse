#!/usr/bin/env bash
source "$PLUGIN_AVAILABLE_PATH/discourse/config"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/domains/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/config/functions"

set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

fn-get-input() {
  declare MESSAGE="$1" DEFAULT="$2"
  read -p "$MESSAGE [$DEFAULT]: " input
  if [[ -z "$input" ]]; then
    echo "$DEFAULT"
  else
    echo "$input"
  fi
}

fn-update-discourse-build-files() {
  if [[ -d "$DISCOURSE_DOCKER_IMAGE_ROOT" ]]; then
    cd "$DISCOURSE_DOCKER_IMAGE_ROOT"
    dokku_log_info1 "Updating the discourse image build files"
    git pull
  else
    dokku_log_info1 "Cloning the discourse image build files"
    git clone https://github.com/discourse/discourse_docker.git "$DISCOURSE_DOCKER_IMAGE_ROOT"
  fi
}

fn-discourse-config-set-volumes() {
  declare APP_NAME="$1" APP_STORAGE_ROOT="$2"
  local CONFIG_FILE_PATH="$DISCOURSE_DOCKER_IMAGE_ROOT/containers/$CONTAINER_TYPE-$APP_NAME.yml"
  local SET_VOLUMES_BIN_PATH="$PLUGIN_AVAILABLE_PATH/discourse/containers/set-volumes"
  local UPDATED_CONFIG
  UPDATED_CONFIG=$("$SET_VOLUMES_BIN_PATH" "$CONFIG_FILE_PATH" "$APP_STORAGE_ROOT" 2> /dev/null)
  if [[ -z "$UPDATED_CONFIG" ]]; then
    dokku_log_fail "Error setting volumes in config"
  fi
  echo "$UPDATED_CONFIG" > "$CONFIG_FILE_PATH"
  dokku_log_info1 "Updated '$APP_NAME' volumes"
}

fn-discourse-config-update-env() {
  declare APP_NAME="$1" \
    HOSTNAME="$2" \
    DEVELOPER_EMAILS="$3" \
    SMTP_ADDRESS="$4" \
    SMTP_PORT="$5" \
    SMTP_USER_NAME="$6" \
    SMTP_PASSWORD="$7"
  local CONFIG_FILE_PATH="$DISCOURSE_DOCKER_IMAGE_ROOT/containers/$CONTAINER_TYPE-$APP_NAME.yml"
  local UPDATE_ENV_BIN_PATH="$PLUGIN_AVAILABLE_PATH/discourse/containers/update-env"
  local UPDATED_CONFIG
  UPDATED_CONFIG=$("$UPDATE_ENV_BIN_PATH" "$CONFIG_FILE_PATH" "$HOSTNAME" "$DEVELOPER_EMAILS" "$SMTP_ADDRESS" "$SMTP_PORT" "$SMTP_USER_NAME" "$SMTP_PASSWORD" 2> /dev/null)
  if [[ -z "$UPDATED_CONFIG" ]]; then
    dokku_log_fail "Error setting env in config"
  fi
  echo "$UPDATED_CONFIG" > "$CONFIG_FILE_PATH"
  dokku_log_info1 "Updated '$APP_NAME' env"
}

fn-create-discourse-default-config() {
  declare APP_NAME="$1" APP_STORAGE_ROOT="$2"
  local APP_CONFIG="containers/$CONTAINER_TYPE-$APP_NAME.yml"
  cd "$DISCOURSE_DOCKER_IMAGE_ROOT"
  cp "$PLUGIN_ROOT_PATH/containers/$CONTAINER_TYPE.yml" "$APP_CONFIG"
}

fn-build-image() {
  declare APP_NAME="$1"
  dokku_log_info1 "Creating the discourse docker image, this can take a while..."
  cd "$DISCOURSE_DOCKER_IMAGE_ROOT"
  ./launcher bootstrap "$CONTAINER_TYPE-$APP_NAME"
}

fn-discourse-config-add-plugin() {
  declare APP_NAME="$1" PLUGIN_GIT_URL="$2"
  local CONFIG_FILE_PATH="$DISCOURSE_DOCKER_IMAGE_ROOT/containers/$CONTAINER_TYPE-$APP_NAME.yml"
  local ADD_PLUGIN_BIN_PATH="$PLUGIN_AVAILABLE_PATH/discourse/containers/add-plugin"
  local UPDATED_CONFIG
  UPDATED_CONFIG=$("$ADD_PLUGIN_BIN_PATH" "$CONFIG_FILE_PATH" "$PLUGIN_GIT_URL" 2> /dev/null)
  if [[ -z "$UPDATED_CONFIG" ]]; then
    dokku_log_fail "Error adding plugin to config"
  fi
  echo "$UPDATED_CONFIG" > "$CONFIG_FILE_PATH"
  dokku_log_info1 "Updated '$APP_NAME' plugin config"
}

fn-deploy-app() {
  declare APP_NAME="$1"
  verify_app_name "$APP_NAME"
  local DISCOURSE_IMAGE_NAME="local_discourse/$CONTAINER_TYPE-$APP_NAME"
  "$DOCKER_BIN" tag "$DISCOURSE_IMAGE_NAME:latest" "dokku/$APP_NAME:latest"
  local IMAGE;
  IMAGE="$(get_app_image_name "$APP_NAME" latest)"
  verify_image "$IMAGE" || return 1
  release_and_deploy "$APP_NAME" "$IMAGE_TAG"
}

fn-install-plugin() {
  declare APP_NAME="$1" PLUGIN_GIT_URL="$2"
  fn-discourse-config-add-plugin "$APP_NAME" "$PLUGIN_GIT_URL"
  local APP_STORAGE_ROOT="$STORAGE_ROOT/$APP_NAME"
  fn-build-image "$APP_NAME" "$APP_STORAGE_ROOT"
}

fn-get-run-args() {
  declare APP_NAME="$1"
  "$DISCOURSE_DOCKER_IMAGE_ROOT"/launcher start-cmd "$CONTAINER_TYPE-$APP_NAME"
}

fn-upgrade-app() {
  declare APP_NAME="$1"
  fn-update-discourse-build-files
  fn-build-image "$APP_NAME"
}

fn-create-dokku-app() {
  declare APP_NAME="$1" HOSTNAME="$2" APP_STORAGE_ROOT="$3"

  plugn trigger app-create "$APP_NAME"
  echo "$APP_NAME" >> "$DISCOURSE_APPS"

  dokku_log_info1 "Generating config..."

  local RUN_ARGS MAC_ADDRESS SHM_SIZE ENV_VARS
  RUN_ARGS=$(fn-get-run-args "$APP_NAME" 2>&1)
  MAC_ADDRESS=$(echo "$RUN_ARGS" | sed -r 's/.*--mac-address(=| )([^ ]+).*/\2/')
  SHM_SIZE=$(echo "$RUN_ARGS" | sed -r 's/.*--shm-size(=| )([^ ]+).*/\2/')
  ENV_VARS=$(echo "$RUN_ARGS" | grep -Po '[[:space:]]-e[[:space:]]*[^[:space:]]+' | tr "\n" "\t" | sed -r 's/(\s*\-e\s*)|(\s+)/ /g' | sed -r 's/^\s*|\s*$//g')

  domains_set "$APP_NAME" "$HOSTNAME"

  ## TODO: call plugin functions instead of dokku
  dokku proxy:ports-add "$APP_NAME" http:80:80       # add correct port mapping
  dokku proxy:ports-remove "$APP_NAME" http:80:5000  # remove default port mapping as a result of calling domains:set

  config_set --no-restart "$APP_NAME" $ENV_VARS

  ## TODO: call plugin functions instead of dokku
  dokku storage:mount "$APP_NAME" "$APP_STORAGE_ROOT":/shared
  dokku storage:mount "$APP_NAME" "$APP_STORAGE_ROOT/log/var-log":/var/log

  ##Â TODO: call plugin functions instead of dokku
  dokku docker-options:add "$APP_NAME" run,deploy "--entrypoint /sbin/boot"
  dokku docker-options:add "$APP_NAME" run,deploy "--hostname dokku-discourse"
  dokku docker-options:add "$APP_NAME" run,deploy "--shm-size=$SHM_SIZE"
  dokku docker-options:add "$APP_NAME" run,deploy "--mac-address $MAC_ADDRESS"

  ## TODO: call plugin functions instead of dokku
  dokku ps:set-restart-policy "$APP_NAME" always
}

fn-destroy-app() {
  declare APP_NAME="$1"
  plugn trigger app-destroy "$APP_NAME"
  sed -i "/^$APP_NAME$/d" "$DISCOURSE_APPS"
  local DISCOURSE_IMAGE_NAME="local_discourse/$CONTAINER_TYPE-$APP_NAME"
  "$DOCKER_BIN" rmi "$DISCOURSE_IMAGE_NAME"
  rm "$DISCOURSE_DOCKER_IMAGE_ROOT/containers/$CONTAINER_TYPE-$APP_NAME.yml"
}

fn-discourse-help-content() {
  cat <<help_content
    ${PLUGIN_COMMAND_PREFIX}:create <app>, Creates a new discourse app
    ${PLUGIN_COMMAND_PREFIX}:destroy <app>, Destroys a discourse app
    ${PLUGIN_COMMAND_PREFIX}:upgrade <app>, Upgrades a discourse app
    ${PLUGIN_COMMAND_PREFIX}:install-plugin <app> <git_url>, Installs a plugin for a discourse app
    ${PLUGIN_COMMAND_PREFIX}:list, Lists all discourse apps
help_content
}

cmd-discourse-help() {
  if [[ $1 == "${PLUGIN_COMMAND_PREFIX}:help" ]]; then
    echo -e "Usage: dokku ${PLUGIN_COMMAND_PREFIX}[:COMMAND] [<app>]"
    echo ''
    echo 'Manages discourse apps'
    echo ''
    echo 'Example:'
    echo ''
    echo "\$ dokku ${PLUGIN_COMMAND_PREFIX}:create app"
    echo ''
    echo 'Commands:'
    fn-discourse-help-content | sort | column -c2 -t -s,
  elif [[ $(ps -o command= $PPID) == *"--all"* ]]; then
    fn-discourse-help-content
  else
    cat <<help_desc
    ${PLUGIN_COMMAND_PREFIX}, Plugin for managing discourse apps
help_desc
  fi
}
